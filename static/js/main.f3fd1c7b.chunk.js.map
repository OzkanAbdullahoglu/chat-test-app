{"version":3,"sources":["assets/fonts/Brown-Regular.ttf","utils/helper.js","reducers/chatReducer.js","reducers/messageReducer.js","reducers/index.js","store.js","components/Wrapper/Wrapper.js","components/Icon/Icon.js","components/TextInput/TextInput.js","components/Message/Message.js","components/Date/Date.js","components/Row/Row.js","components/MessageList/MessageList.js","components/Header/Header.js","components/Spinner/Spinner.js","components/ViewPort.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","timeConverter","timeStamp","cache","dateObj","Date","dayOfMonth","getDate","curMonth","getMonth","curYear","getFullYear","curMinute","getMinutes","curHour","getHours","date","time","isToday","timestamp","today","Math","floor","now","toString","types","INITIAL_STATE","requestedData","isPending","error","scrollDownEnable","actions","setUpdatedTimeStampData","dispatch","getStore","chatStore","chat","getInitialData","getRequestedData","updatedData","performTimeConversion","i","len","length","getTimeStamp","push","type","convertedData","setDefault","setReadMessages","messages","getCurrentData","performUpdateReadMessages","getRestOfTheChunkData","slice","direction","status","concatDataBack","concat","readMessages","setAddNewMessages","message","assignId","id","newMessage","text","updatedMessages","setToggleScrollDownDisable","setToggleScrollDownEnable","setRequestedData","fetch","then","response","json","data","catch","state","selectors","getShowTimeStampBool","getUnreadMessages","unreadMessageIds","currentData","count","firstUnreadId","getScrollDownVisibilityStatus","getPendingStatus","messagesEndRef","setLastMessageRef","messageRef","rootReducer","combineReducers","action","version","number","store","chatSelectors","getLastMessageRef","messageSelectors","middlewares","thunk","persistConfig","key","storage","timeout","stateReconciler","autoMergeLevel2","blacklist","persistedReducer","persistReducer","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","Wrapper","styled","div","props","incomingIcon","incomingAvatar","sendIcon","hideButton","scrollDown","SvgIcon","svg","TextInput","handleChange","event","setState","value","target","handleSubmit","scrollToBottom","scrollToFirstUnread","unreadMesssages","preventDefault","handleKeyPress","textInput","document","getElementById","nativeEvent","keyCode","className","onSubmit","this","autoComplete","placeholder","onChange","onKeyPress","aria-label","tabIndex","viewBox","onClick","data-test","d","fill","React","Component","withRedux","connect","chatActions","compose","Message","pack","style","fontSize","color","padding","float","alignSelf","updatedInitialData","showTimeStampBool","messageActions","forwardRef","index","items","messagesEnd","useRef","useEffect","ref","initialData","isScrollDownVisible","endOfTheList","height","width","scrollToTheLastMessage","listRef","current","undefined","scrollIntoView","behavior","block","scrollToItem","handleClick","xmlns","fixedHeaderHeight","itemSize","itemCount","overscanCount","onItemsRendered","item","visibleMessages","visibleStopIndex","Row","unreadMessages","spin","keyframes","Spinner","getCurrentViewDims","window","innerWidth","innerHeight","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useCurrentViewDims","loading","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f3fd1c7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Brown-Regular.123c7e67.ttf\";","/* eslint-disable linebreak-style */\r\nexport const timeConverter = (timeStamp) => {\r\n  if (!timeConverter.cache) {\r\n    timeConverter.cache = {};\r\n  }\r\n\r\n  if (!timeConverter.cache[timeStamp]) {\r\n    const timeStampMs = timeStamp * 1000;\r\n    const dateObj = new Date(timeStampMs);\r\n    const dayOfMonth = dateObj.getDate() < 10 ? `0${dateObj.getDate()}` : dateObj.getDate();\r\n    const months = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December',\r\n    ];\r\n    const curMonth = months[dateObj.getMonth()];\r\n    const curYear = dateObj.getFullYear();\r\n    const curMinute = dateObj.getMinutes() < 10 ? `0${dateObj.getMinutes()}` : dateObj.getMinutes();\r\n    const curHour = (dateObj.getHours() < 10 ? `0${dateObj.getHours()}` : dateObj.getHours());\r\n\r\n    timeConverter.cache[timeStamp] = {\r\n      date: `${curMonth} ${dayOfMonth},${curYear}`,\r\n      time: `${curHour}:${curMinute}`,\r\n    };\r\n    return timeConverter.cache[timeStamp];\r\n  }\r\n  return timeConverter.cache[timeStamp];\r\n};\r\n\r\nexport const isToday = (timestamp, date) =>{\r\n  const today = Math.floor(Date.now() / 1000).toString();\r\n  return timeConverter(today).date === timeConverter(timestamp).date ?\r\n    'Today' : timeConverter(today).date === timeConverter(timestamp).date - 1 ?\r\n    'Yesterday' : date;\r\n};\r\n","/* eslint-disable linebreak-style */\r\nimport { timeConverter } from '../utils/helper';\r\nconst fetchURL = 'https://raw.githubusercontent.com/OzkanAbdullahoglu/chat-test-app/master/src/data/messageData.json';\r\nexport const types = {\r\n  CONVERT_TO_DATE: 'CONVERT_TO_DATE',\r\n  UPDATE_READ_MESSAGES: 'UPDATE_READ_MESSAGES',\r\n  ADD_NEW_MESSAGES: 'ADD_NEW_MESSAGES',\r\n  HIDE_SCROLL_BUTTON: 'HIDE_SCROLL_BUTTON',\r\n  REQUEST_DATA_PENDING: 'REQUEST_DATA_PENDING',\r\n  REQUEST_DATA_SUCCESS: 'REQUEST_DATA_SUCCESS',\r\n  REQUEST_DATA_FAILED: 'REQUEST_DATA_FAILED',\r\n  SET_LAST_MESSAGE_REF: 'SET_LAST_MESSAGE_REF',\r\n\r\n  DEFAULTS: 'DEFAULTS',\r\n\r\n};\r\n\r\nexport const INITIAL_STATE = {\r\n  requestedData: [],\r\n  isPending: false,\r\n  error: '',\r\n  scrollDownEnable: true,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case types.REQUEST_DATA_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: action.isPending,\r\n      };\r\n    case types.REQUEST_DATA_SUCCESS:\r\n      if (state.requestedData.length > 0) {\r\n        return {\r\n          ...state,\r\n          isPending: false,\r\n          requestedData: [...state.requestedData],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        isPending: action.isPending,\r\n        requestedData: action.requestedData,\r\n      };\r\n    case types.REQUEST_DATA_FAILED:\r\n      return {\r\n        ...state,\r\n        isPending: action.isPending,\r\n        error: action.error,\r\n      };\r\n    case types.CONVERT_TO_DATE:\r\n      return {\r\n        ...state,\r\n        requestedData: action.convertedData,\r\n      };\r\n    case types.UPDATE_READ_MESSAGES:\r\n      return {\r\n        ...state,\r\n        requestedData: action.readMessages,\r\n      };\r\n    case types.ADD_NEW_MESSAGES:\r\n      return {\r\n        ...state,\r\n        requestedData: [...state.requestedData, action.updatedMessages],\r\n      };\r\n    case types.HIDE_SCROLL_BUTTON:\r\n      return {\r\n        ...state,\r\n        scrollDownEnable: action.scrollDownEnable,\r\n      };\r\n\r\n    case types.DEFAULTS:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ACTIONS\r\nconst setRequestedData = () => (dispatch) => {\r\n  dispatch({\r\n    type: types.REQUEST_DATA_PENDING,\r\n    isPending: true,\r\n  });\r\n  fetch(fetchURL)\r\n    .then((response) => response.json())\r\n    .then((data) =>\r\n      dispatch({\r\n        type: types.REQUEST_DATA_SUCCESS,\r\n        isPending: false,\r\n        requestedData: data,\r\n      }))\r\n    .catch((error) =>\r\n      dispatch({\r\n        type: types.REQUEST_DATA_FAILED,\r\n        isPending: false,\r\n        error,\r\n      }));\r\n};\r\nconst setUpdatedTimeStampData = () => (dispatch, getStore) => {\r\n  const chatStore = getStore().chat;\r\n  const getInitialData = getRequestedData(chatStore);\r\n  const updatedData = [...getInitialData];\r\n  const performTimeConversion = [];\r\n  for (let i = 0, len = updatedData.length; i < len; i += 1) {\r\n    const getTimeStamp = updatedData[i].timestamp;\r\n    updatedData[i].date = timeConverter(getTimeStamp).date;\r\n    updatedData[i].time = timeConverter(getTimeStamp).time;\r\n    performTimeConversion.push(updatedData[i]);\r\n  }\r\n  dispatch({\r\n    type: types.CONVERT_TO_DATE,\r\n    convertedData: performTimeConversion,\r\n  });\r\n};\r\n\r\nconst setReadMessages = (messages) => (dispatch, getStore) => {\r\n  const chatStore = getStore().chat;\r\n  const getCurrentData = getRequestedData(chatStore);\r\n  const performUpdateReadMessages = [];\r\n  /* const getChunkData = getCurrentData.slice(0, filteredSeenMessages.length);*/\r\n  const getRestOfTheChunkData = getCurrentData.slice(messages, getCurrentData.length);\r\n  for (let i = 0, len = messages; i < len; i += 1) {\r\n    if (getCurrentData[i].direction === 'in') {\r\n      getCurrentData[i].status = 'read';\r\n    }\r\n    performUpdateReadMessages.push(getCurrentData[i]);\r\n  }\r\n  const concatDataBack = performUpdateReadMessages.concat(getRestOfTheChunkData);\r\n  dispatch({\r\n    type: types.UPDATE_READ_MESSAGES,\r\n    readMessages: concatDataBack,\r\n  });\r\n};\r\n\r\nconst setAddNewMessages = (message) => (dispatch, getStore) => {\r\n  const chatStore = getStore().chat;\r\n  const getCurrentData = getRequestedData(chatStore);\r\n  const assignId = getCurrentData[getCurrentData.length - 1].id + 1;\r\n  const timestamp = Math.floor(Date.now() / 1000).toString();\r\n  const newMessage = {};\r\n  newMessage.id = assignId;\r\n  newMessage.direction = 'out';\r\n  newMessage.status = 'sent';\r\n  newMessage.timestamp = timestamp;\r\n  newMessage.text = message;\r\n  newMessage.date = timeConverter(timestamp).date;\r\n  newMessage.time = timeConverter(timestamp).time;\r\n  dispatch({\r\n    type: types.ADD_NEW_MESSAGES,\r\n    updatedMessages: newMessage,\r\n  });\r\n};\r\n\r\nconst setToggleScrollDownDisable = () => (dispatch) => {\r\n  dispatch({\r\n    type: types.HIDE_SCROLL_BUTTON,\r\n    scrollDownEnable: false,\r\n  });\r\n};\r\nconst setToggleScrollDownEnable = () => (dispatch) => {\r\n  dispatch({\r\n    type: types.HIDE_SCROLL_BUTTON,\r\n    scrollDownEnable: true,\r\n  });\r\n};\r\n\r\n\r\nconst setDefault = () => ({\r\n  type: types.DEFAULTS,\r\n});\r\n\r\nexport const actions = {\r\n  setUpdatedTimeStampData,\r\n  setDefault,\r\n  setReadMessages,\r\n  setAddNewMessages,\r\n  setToggleScrollDownDisable,\r\n  setToggleScrollDownEnable,\r\n  setRequestedData,\r\n};\r\n// SELECTORS\r\nconst getScrollDownVisibilityStatus = (state) => state.scrollDownEnable;\r\nconst getRequestedData = (state) => state.requestedData;\r\nconst getPendingStatus = (state) => state.isPending;\r\nconst getShowTimeStampBool = (state, id) => {\r\n  if (id === 1) {\r\n    return true;\r\n  }\r\n  if (state.requestedData[id - 2].date !== state.requestedData[id - 1].date) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getUnreadMessages = (state) => {\r\n  const unreadMessageIds = [];\r\n  const currentData = state.requestedData;\r\n  for (let i = 0, len = currentData.length; i < len; i += 1) {\r\n    if (currentData[i].direction === 'in' && currentData[i].status === 'received') {\r\n      unreadMessageIds.push(currentData[i].id);\r\n    }\r\n  }\r\n  return {\r\n    count: unreadMessageIds.length,\r\n    firstUnreadId: unreadMessageIds[0] || 'none',\r\n  };\r\n};\r\n\r\nexport const selectors = {\r\n  getRequestedData,\r\n  getShowTimeStampBool,\r\n  getUnreadMessages,\r\n  getScrollDownVisibilityStatus,\r\n  getPendingStatus,\r\n};\r\n","/* eslint-disable linebreak-style */\r\nexport const types = {\r\n  SET_LAST_MESSAGE_REF: 'SET_LAST_MESSAGE_REF',\r\n};\r\n\r\nexport const INITIAL_STATE = {\r\n  messagesEndRef: '',\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case types.SET_LAST_MESSAGE_REF:\r\n      return {\r\n        ...state,\r\n        messagesEndRef: action.messagesEndRef,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ACTIONS\r\nconst setLastMessageRef = (messageRef) => (dispatch) => {\r\n  dispatch({\r\n    type: types.SET_LAST_MESSAGE_REF,\r\n    messagesEndRef: messageRef,\r\n  });\r\n};\r\n\r\nexport const actions = {\r\n  setLastMessageRef,\r\n};\r\n// SELECTORS\r\nconst getLastMessageRef = (state) => state.messagesEndRef;\r\n\r\nexport const selectors = {\r\n  getLastMessageRef,\r\n};\r\n","/* eslint-disable linebreak-style */\r\nimport { combineReducers } from 'redux';\r\nimport chatReducer, {\r\n  selectors as chatSelectors,\r\n  actions as chatActions,\r\n  types as chatTypes,\r\n} from './chatReducer';\r\nimport messageReducer, {\r\n  selectors as messageSelectors,\r\n  actions as messageActions,\r\n  types as messageTypes,\r\n} from './messageReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  chat: chatReducer,\r\n  message: messageReducer,\r\n  version: () => ({\r\n    number: '0.0.1',\r\n  }),\r\n});\r\n\r\nexport const getRequestedData = (store) =>\r\n  chatSelectors.getRequestedData(store.chat);\r\nexport const getUnreadMessages = (store) =>\r\n  chatSelectors.getUnreadMessages(store.chat);\r\nexport const getScrollDownVisibilityStatus = (store) =>\r\n  chatSelectors.getScrollDownVisibilityStatus(store.chat);\r\nexport const getPendingStatus = (store) =>\r\n  chatSelectors.getPendingStatus(store.chat);\r\nexport const getShowTimeStampBool = (store) => (id) =>\r\n  chatSelectors.getShowTimeStampBool(store.chat, id);\r\n\r\nexport const getLastMessageRef = (store) =>\r\n  messageSelectors.getLastMessageRef(store.message);\r\n\r\nexport { chatActions, chatTypes, messageActions, messageSelectors };\r\n\r\nexport default rootReducer;\r\n","/* eslint-disable linebreak-style */\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport const middlewares = [thunk];\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  timeout: 0,\r\n  stateReconciler: autoMergeLevel2,\r\n  blacklist: ['message'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = createStore(\r\n  persistedReducer,\r\n  composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","/* eslint-disable linebreak-style */\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: ${(props) =>\r\n    props.incomingIcon || props.incomingAvatar || props.sendIcon\r\n      ? '40px'\r\n      : '20px'};\r\n  height: ${(props) =>\r\n    props.incomingIcon || props.incomingAvatar || props.sendIcon\r\n      ? '40px'\r\n      : '20px'};\r\n  display: flex;\r\n  opacity: ${(props) => (props.hideButton ? 0 : 1)};\r\n  transition-property: opacity;\r\n  transition-duration: 0.5s;\r\n  transition-timing-function: linear;\r\n  transition-delay: 0.1s;\r\n  position: ${(props) =>\r\n    props.sendIcon ? 'absolute' : props.scrollDown ? 'sticky' : 'relative'};\r\n  border-radius: 50%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #fff;\r\n  background-color: ${(props) => (props.incomingIcon ? ' #fff' : '#00bcd4')};\r\n  border: ${(props) => (props.incomingIcon ? '1px solid #00bcd4' : 'none')};\r\n  cursor: ${(props) =>\r\n    props.scrollDown || props.incomingIcon || props.sendIcon\r\n      ? 'pointer'\r\n      : 'auto'};\r\n  margin: ${(props) => (props.scrollDown ? '0 10px 0 0' : '0 7px 0 10px')};\r\n  right: ${(props) => (props.sendIcon || props.scrollDown ? '0' : 'inherit')};\r\n  bottom: ${(props) => (props.sendIcon ? '10px' : 'inherit')};\r\n  top: ${(props) =>\r\n    props.scrollDown ? '625px' : props.sendIcon ? '10px' : '0'};\r\n  left: ${(props) => (props.scrollDown ? '410px' : 'inherit')};\r\n  box-shadow: 0.1em 0.1em rgba(0, 0, 0, 0.12);\r\n  -moz-box-shadow: 0.1em 0.1em rgba(0, 0, 0, 0.12);\r\n  -webkit-box-shadow: 0.1em 0.1em rgba(0, 0, 0, 0.12);\r\n  -o-box-shadow: 0.1em 0.1em rgba(0, 0, 0, 0.12);\r\n  z-index: 2;\r\n  &:hover {\r\n    background: ${(props) =>\r\n    props.scrollDown || props.incomingIcon ? '#00bcd4' : '#00bcd4'};\r\n    color: #fff;\r\n  }\r\n  &:focus {\r\n    outline: '1px solid black';\r\n    outline-offset: -4px;\r\n  }\r\n\r\n  @media (max-height: 1370px) and (max-width: 1024px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '1250px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '390px' : 'inherit')};\r\n  }\r\n\r\n  @media (max-height: 1024px) and (max-width: 770px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '900px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '380px' : 'inherit')};\r\n  }\r\n  @media (max-height: 823px) and (max-width: 415px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '600px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '310px' : 'inherit')};\r\n  }\r\n  @media (max-height: 670px) and (max-width: 375px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '500px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '300px' : 'inherit')};\r\n  }\r\n  @media (max-height: 640px) and (max-width: 360px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '475px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '300px' : 'inherit')};\r\n  }\r\n\r\n  @media (max-height: 570px) and (max-width: 320px) {\r\n    top: ${(props) =>\r\n    props.scrollDown ? '440px' : props.sendIcon ? '10px' : '0'};\r\n    left: ${(props) => (props.scrollDown ? '250px' : 'inherit')};\r\n  }\r\n`;\r\n","/* eslint-disable linebreak-style */\r\nimport styled from 'styled-components';\r\nimport { Wrapper } from '../Wrapper/Wrapper';\r\n\r\nconst SvgIcon = styled.svg`\r\n  fill: currentColor;\r\n  width: ${(props) => (props.sendIcon ? '1.5em' : '2em')};\r\n  height: ${(props) => (props.sendIcon ? '1.5em' : '2em')};\r\n  font-size: ${(props) => (props.incomingAvatar ? '1.5rem' : '1rem')};\r\n  color: ${(props) => (props.incomingIcon ? '#00bcd4' : '#fff')};\r\n  margin-right: ${(props) => (props.incomingIcon ? '0.1rem' : 0)};\r\n  position: ${(props) => (props.sendIcon ? 'absolute' : 'relative')};\r\n  transform: ${(props) => (props.scrollDown ? 'rotate(90deg)' :\r\n    props.incomingIcon ? 'rotate(180deg)' :\r\n      'rotate(0)')};\r\n\r\n   ${Wrapper}:hover & {\r\n    color: #fff\r\n  };\r\n`;\r\n\r\nexport default SvgIcon;\r\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'recompose';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Wrapper } from '../Wrapper/Wrapper';\r\nimport SvgIcon from '../Icon/Icon';\r\nimport './TextInput.css';\r\nimport {\r\n  chatActions,\r\n  getUnreadMessages,\r\n} from '../../reducers';\r\n\r\nclass TextInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: '' };\r\n  }\r\n\r\n    handleChange =(event) => {\r\n      this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n      const { setAddNewMessages,\r\n        scrollToBottom,\r\n        scrollToFirstUnread,\r\n        unreadMesssages } = this.props;\r\n      const { firstUnreadId } = unreadMesssages;\r\n      if (this.state.value !== '') {\r\n        setAddNewMessages(this.state.value);\r\n        if (firstUnreadId !== 'none') {\r\n          scrollToFirstUnread();\r\n        } else {\r\n          scrollToBottom();\r\n        }\r\n        this.setState({ value: '' });\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    handleKeyPress = (event) => {\r\n      const textInput = document.getElementById('standard-basic').value;\r\n      if (event.nativeEvent.keyCode === 13 && textInput === '') {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n    render() {\r\n      return (\r\n        <form className=\"form-main\" onSubmit={this.handleSubmit} autoComplete={'off'}>\r\n          <div className=\"form-control-root\">\r\n            <input\r\n              placeholder=\"Sending Message...\"\r\n              id=\"standard-basic\"\r\n              type=\"text\"\r\n              className=\"base-input\"\r\n              onChange={this.handleChange}\r\n              onKeyPress={this.handleKeyPress}\r\n              value={this.state.value}\r\n              autoComplete={'off'}\r\n            />\r\n            <Wrapper\r\n              sendIcon\r\n              aria-label=\"Click to send a message\"\r\n              tabIndex=\"0\"\r\n            >\r\n              <SvgIcon\r\n                sendIcon\r\n                viewBox=\"0 0 24 24\"\r\n                onClick={this.handleSubmit}\r\n                data-test=\"svg-icon\"\r\n              >\r\n                <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n              </SvgIcon>\r\n            </Wrapper>\r\n          </div>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nTextInput.propTypes = {\r\n  setAddNewMessages: PropTypes.func,\r\n  scrollToBottom: PropTypes.func,\r\n  scrollToFirstUnread: PropTypes.func,\r\n  unreadMesssages: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (store) => ({\r\n  unreadMesssages: getUnreadMessages(store),\r\n});\r\n\r\nconst withRedux = connect(\r\n  mapStateToProps,\r\n  { ...chatActions }\r\n);\r\n\r\nexport default compose(withRedux)(TextInput);\r\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport PropTypes from 'prop-types';\r\nimport './Message.css';\r\nconst Message = ({\r\n  pack,\r\n}) => (\r\n  <div className=\"list-item-root\">\r\n    <div className=\"list-item-text-root\">\r\n      {pack.direction === 'out' ? (\r\n        <div className=\"list-item-text-primary message-out\">\r\n          <span data-test=\"item-text\">{pack.text}</span>\r\n          <span\r\n            className=\"time-inline\"\r\n          >{pack.time}</span>\r\n          {pack.status === 'sent' ? (\r\n            <Icon\r\n              style={{\r\n                fontSize: '1rem',\r\n                color: 'gray',\r\n                padding: 0,\r\n                float: 'right',\r\n                alignSelf: 'center',\r\n              }}\r\n              data-test=\"sent-icon\"\r\n            >done</Icon>\r\n          ) : (\r\n            <Icon\r\n              style={{\r\n                fontSize: '1rem',\r\n                padding: 0,\r\n                float: 'right',\r\n                alignSelf: 'center',\r\n                color: pack.status === 'read' ? 'blue' : '#777',\r\n              }}\r\n              data-test=\"read-icon\"\r\n            >\r\n            done_all\r\n            </Icon>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"list-item-text-primary\">\r\n          <span data-test=\"item-text\">{pack.text}</span>\r\n          <span className=\"time-inline\">{pack.time}</span>\r\n        </div>\r\n      )\r\n      }\r\n    </div>\r\n  </div>\r\n);\r\n\r\nMessage.propTypes = {\r\n  pack: PropTypes.object,\r\n};\r\n\r\nexport default Message;\r\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Date.css';\r\nimport { isToday } from '../../utils/helper';\r\nconst Date = ({\r\n  pack,\r\n}) => (\r\n  <div className=\"list-item-date-root\">\r\n    <div\r\n      className=\"list-item-date-text-primary timestamp\"\r\n      aria-label=\"Date\"\r\n    >\r\n      <span>{isToday(pack.timestamp, pack.date)}</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nDate.propTypes = {\r\n  pack: PropTypes.object,\r\n};\r\n\r\nexport default Date;\r\n","/* eslint-disable linebreak-style */\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'recompose';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Message from '../Message/Message';\r\nimport '../Row/Row.css';\r\nimport Date from '../Date/Date';\r\nimport {\r\n  messageActions,\r\n  getRequestedData,\r\n  getShowTimeStampBool,\r\n} from '../../reducers';\r\n\r\nconst Row = ({\r\n  index,\r\n  style,\r\n  showTimeStampBool,\r\n  updatedInitialData,\r\n  setLastMessageRef }) => {\r\n  const items = updatedInitialData;\r\n  const messagesEnd = useRef();\r\n  useEffect(() => {\r\n    if (index === items.length - 1) {\r\n      setLastMessageRef(messagesEnd);\r\n    }\r\n  }, []\r\n  );\r\n  return (\r\n    showTimeStampBool(items[index].id) ? (\r\n      <div style={style} className={`list-item-container ${index}`} key={items[index].id}>\r\n        <Date pack={items[index]} />\r\n        <Message pack={items[index]} />\r\n        {index === items.length - 1 ? (\r\n          <div className=\"list-end-message list-item-container\" ref={messagesEnd}></div>\r\n        ) : null\r\n        }\r\n      </div>\r\n    ) : (\r\n      <div style={style} className={`list-item-container ${index}`} key={items[index].id}>\r\n        <Message pack={items[index]} />\r\n        {index === items.length - 1 ? (\r\n          <div className=\"list-end-message list-item-container\" ref={messagesEnd}></div>\r\n        ) : null\r\n        }\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nRow.propTypes = {\r\n  updatedInitialData: PropTypes.array,\r\n  showTimeStampBool: PropTypes.func,\r\n  setLastMessageRef: PropTypes.func,\r\n  index: PropTypes.number,\r\n  style: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (store) => ({\r\n  updatedInitialData: getRequestedData(store),\r\n  showTimeStampBool: getShowTimeStampBool(store),\r\n});\r\n\r\nconst withRedux = connect(\r\n  mapStateToProps,\r\n  { ...messageActions },\r\n  null,\r\n  { forwardRef: true },\r\n);\r\n\r\nexport default compose(withRedux)(Row);\r\n","/* eslint-disable linebreak-style */\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { VariableSizeList } from 'react-window';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'recompose';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Wrapper } from '../Wrapper/Wrapper';\r\nimport SvgIcon from '../Icon/Icon';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport Row from '../Row/Row';\r\nimport './MessageList.css';\r\nimport {\r\n  chatActions,\r\n  getRequestedData,\r\n  getShowTimeStampBool,\r\n  getUnreadMessages,\r\n  getScrollDownVisibilityStatus,\r\n  getLastMessageRef,\r\n} from '../../reducers';\r\n\r\nconst MessageList = ({\r\n  initialData,\r\n  setUpdatedTimeStampData,\r\n  showTimeStampBool,\r\n  unreadMesssages,\r\n  setReadMessages,\r\n  setToggleScrollDownDisable,\r\n  setToggleScrollDownEnable,\r\n  isScrollDownVisible,\r\n  endOfTheList,\r\n  height,\r\n  width,\r\n}) => {\r\n  useEffect(() => { setUpdatedTimeStampData(); }, []);\r\n  useEffect(() => {\r\n    const { firstUnreadId } = unreadMesssages;\r\n    if (firstUnreadId === 'none') return scrollToTheLastMessage();\r\n  }, []);\r\n\r\n  const listRef = useRef();\r\n  const fixedHeaderHeight = 120;\r\n  const fixedTextInputHeight = 60;\r\n  const fixedHeights = fixedHeaderHeight + fixedTextInputHeight;\r\n  const items = initialData;\r\n  const defaultItemSize = 45;\r\n  const doubleItemSize = 90;\r\n  const getItemSize = (index) => showTimeStampBool((items[index].id)) ? doubleItemSize : defaultItemSize;\r\n  const scrollToBottom = () => {\r\n    if (endOfTheList.current === null || endOfTheList.current === undefined) {\r\n      scrollToTheLastMessage();\r\n    } else {\r\n      endOfTheList.current.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'end',\r\n      });\r\n    }\r\n  };\r\n\r\n  const scrollToTheLastMessage = () => {\r\n    if (listRef.current !== null || listRef.current !== undefined) {\r\n      listRef.current.scrollToItem(items[items.length - 1].id + 2, {\r\n        behavior: 'smooth',\r\n        block: 'end',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    const { firstUnreadId } = unreadMesssages;\r\n    if (firstUnreadId !== 'none') {\r\n      listRef.current.scrollToItem(firstUnreadId, {\r\n        behavior: 'smooth',\r\n        block: 'end',\r\n      });\r\n    } else {\r\n      scrollToBottom();\r\n    }\r\n  };\r\n\r\n  const onItemsRendered = (item) => {\r\n    const { firstUnreadId } = unreadMesssages;\r\n    const hideScrollButtonToBottom = 10;\r\n    const visibleMessages = item.visibleStopIndex + 1;\r\n    if (visibleMessages >= firstUnreadId) {\r\n      setReadMessages(visibleMessages);\r\n    }\r\n    if (firstUnreadId === 'none' && items.length - visibleMessages < hideScrollButtonToBottom) {\r\n      setToggleScrollDownDisable();\r\n    } else {\r\n      setToggleScrollDownEnable();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-list\">\r\n      <Wrapper\r\n        incomingIcon\r\n        scrollDown\r\n        hideButton={!isScrollDownVisible}\r\n        data-test=\"wrapper\"\r\n        aria-label=\"Scroll down to the first unread message\"\r\n        tabIndex=\"0\"\r\n      >\r\n        <SvgIcon\r\n          incomingIcon\r\n          scrollDown\r\n          viewBox=\"0 0 48 48\"\r\n          onClick={handleClick}\r\n          data-test=\"svg-icon\"\r\n        >\r\n          <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M20 12l-2.83 2.83 9.17 9.17-9.17 9.17 2.83 2.83 12-12z\" />\r\n          <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M0 0h48v48h-48z\" fill=\"none\" />\r\n        </SvgIcon>\r\n      </Wrapper>\r\n      <VariableSizeList\r\n        ref={listRef}\r\n        height={height - fixedHeights}\r\n        width={width}\r\n        itemSize={getItemSize}\r\n        itemCount={items.length}\r\n        className=\"list-root\"\r\n        overscanCount={5}\r\n        onItemsRendered={onItemsRendered}\r\n      >\r\n        {Row}\r\n      </VariableSizeList>\r\n      <TextInput\r\n        scrollToBottom={scrollToBottom}\r\n        scrollToFirstUnread={handleClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageList.propTypes = {\r\n  initialData: PropTypes.array,\r\n  showTimeStampBool: PropTypes.func,\r\n  isScrollDownVisible: PropTypes.bool,\r\n  setReadMessages: PropTypes.func,\r\n  endOfTheList: PropTypes.string,\r\n  setUpdatedTimeStampData: PropTypes.func,\r\n  setToggleScrollDownDisable: PropTypes.func,\r\n  setToggleScrollDownEnable: PropTypes.func,\r\n  unreadMesssages: PropTypes.object,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n};\r\n\r\nconst mapStateToProps = (store) => ({\r\n  initialData: getRequestedData(store),\r\n  showTimeStampBool: getShowTimeStampBool(store),\r\n  unreadMesssages: getUnreadMessages(store),\r\n  isScrollDownVisible: getScrollDownVisibilityStatus(store),\r\n  endOfTheList: getLastMessageRef(store),\r\n});\r\n\r\nconst withRedux = connect(\r\n  mapStateToProps,\r\n  { ...chatActions }\r\n);\r\n\r\nexport default compose(withRedux)(MessageList);\r\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'recompose';\r\nimport PropTypes from 'prop-types';\r\nimport './Header.css';\r\nimport {\r\n  chatActions, getUnreadMessages,\r\n} from '../../reducers';\r\nimport { Wrapper } from '../Wrapper/Wrapper';\r\nimport SvgIcon from '../Icon/Icon';\r\n\r\nconst Header = ({\r\n  unreadMessages,\r\n  incomingIcon,\r\n  incomingAvatar,\r\n}) => (\r\n  <div className=\"container-root\">\r\n    {incomingAvatar ? (\r\n      <div className=\"header-root incoming-user\">\r\n        <Wrapper\r\n          data-test=\"wrapper\"\r\n          incomingIcon\r\n          aria-label=\"Back to chat screen\"\r\n          tabIndex=\"0\"\r\n        >\r\n          <SvgIcon\r\n            incomingIcon\r\n            viewBox=\"0 0 48 48\"\r\n          >\r\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M20 12l-2.83 2.83 9.17 9.17-9.17 9.17 2.83 2.83 12-12z\" />\r\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M0 0h48v48h-48z\" fill=\"none\" />\r\n          </SvgIcon>\r\n        </Wrapper>\r\n        <Wrapper\r\n          incomingAvatar\r\n          aria-label=\"View User 2 profile\"\r\n          tabIndex=\"0\"\r\n        >\r\n          <SvgIcon\r\n            incomingAvatar\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\r\n            />\r\n          </SvgIcon>\r\n        </Wrapper>\r\n        <div className=\"header-content\" tabIndex=\"0\">\r\n          <span\r\n            className=\"header-text\"\r\n          >User 2</span>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"header-root\" >\r\n        <Wrapper\r\n          data-test=\"wrapper\"\r\n          incomingAvatar={false}\r\n          aria-label=\"View User 1 profile\"\r\n          tabIndex=\"0\"\r\n        >\r\n          <SvgIcon\r\n            incomingAvatar={false}\r\n            viewBox=\"0 0 24 24\"\r\n            data-test=\"icon\"\r\n          >\r\n            <path\r\n              d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\r\n            />\r\n          </SvgIcon>\r\n        </Wrapper>\r\n        <div className=\"header-content\" tabIndex=\"0\">\r\n          <span\r\n            className=\"header-text\"\r\n          >User 1 ({unreadMessages.count} new messages)</span>\r\n        </div>\r\n      </div>\r\n    )\r\n    }\r\n  </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n  unreadMessages: PropTypes.object,\r\n  incomingIcon: PropTypes.bool,\r\n  incomingAvatar: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (store) => ({\r\n  unreadMessages: getUnreadMessages(store),\r\n});\r\n\r\nconst withRedux = connect(\r\n  mapStateToProps,\r\n  { ...chatActions }\r\n);\r\n\r\nexport default compose(withRedux)(Header);\r\n","/* eslint-disable linebreak-style */\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst spin = keyframes`\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  border: 0.2em solid rgba(0, 0, 0, 0.1);\r\n  border-top: 0.2em solid #00bcd4;\r\n  border-radius: 50%;\r\n  width: 2.2rem;\r\n  height: 2.2rem;\r\n  animation: ${spin} 0.6s linear infinite;\r\n  position: fixed;\r\n  top: 50%;\r\n  bottom: 50%;\r\n  left: 50%;\r\n`;\r\n\r\nexport default Spinner;\r\n","/* eslint-disable linebreak-style */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction getCurrentViewDims() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nexport default function useCurrentViewDims() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getCurrentViewDims());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getCurrentViewDims());\r\n    }\r\n\r\n    window.addEventListener('scroll', handleResize);\r\n    return () => window.removeEventListener('scroll', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","/* eslint-disable linebreak-style */\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { compose } from 'recompose';\nimport PropTypes from 'prop-types';\n\nimport { persistor } from '../store';\nimport './App.css';\nimport MessageList from '../components/MessageList/MessageList';\nimport Header from '../components/Header/Header';\nimport Spinner from '../components/Spinner/Spinner';\nimport useCurrentViewDims from '../components/ViewPort';\n\nimport {\n  chatActions,\n  getPendingStatus,\n} from '../reducers';\n\nconst App = ({ setRequestedData, isPending }) => {\n  useEffect(() => { setRequestedData(); }, []);\n  const { height, width } = useCurrentViewDims();\n  return (\n    <PersistGate loading={null} persistor={persistor}>\n      <Header incomingIcon={false} incomingAvatar={false} />\n      <Header incomingIcon incomingAvatar />\n      {isPending ? (\n        <Spinner data-test=\"spinner\" />\n      ) : (\n        <MessageList\n          width={width}\n          height={height}\n        />\n      )}\n\n    </PersistGate>\n  );\n};\n\nApp.propTypes = {\n  setRequestedData: PropTypes.func,\n  isPending: PropTypes.bool,\n};\n\nconst mapStateToProps = (store) => ({\n  isPending: getPendingStatus(store),\n});\n\nconst withRedux = connect(\n  mapStateToProps,\n  { ...chatActions }\n);\n\nexport default compose(withRedux)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './assets/fonts/Brown-Regular.ttf';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}